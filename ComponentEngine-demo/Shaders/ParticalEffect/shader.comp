#version 460

#extension GL_KHR_shader_subgroup_ballot: enable


struct _ParticleInstance{
  vec4 position;
  vec4 color;
};

layout(std430, set=0, binding=0) buffer ParticleInstanceBuffer
{
	_ParticleInstance particleInstance[];
};


struct _ParticleConfig{
	vec4 startColor;
	vec4 endColor;
	vec3 emiter;
	float totalTime;
	float updateTime;
	float maxLife;
	float emmisionRate;
	float scale;
};

layout(std430, set=0, binding=1) buffer ParticleConfigBuffer
{
  _ParticleConfig particleConfig;
};

struct _ParticlePayloadsInstance{
	vec3 origin;
	float life;
	vec3 velocity;
};

layout(std430, set=0, binding=2) buffer ParticlePayloadsBuffer
{
  _ParticlePayloadsInstance particlePayloadsInstance[];
};



void main()
{
	uint ParticleIndex = gl_GlobalInvocationID.x;

	particlePayloadsInstance[ParticleIndex].life -= particleConfig.updateTime;

	if(particlePayloadsInstance[ParticleIndex].life < 0.0f)
	{
		particlePayloadsInstance[ParticleIndex].life += particleConfig.maxLife;
		particlePayloadsInstance[ParticleIndex].origin = particleConfig.emiter;
	}
	
	float mixRate = particlePayloadsInstance[ParticleIndex].life / particleConfig.maxLife;

	particleInstance[ParticleIndex].color = mix(particleConfig.endColor,particleConfig.startColor,mixRate);
	particleInstance[ParticleIndex].position.xyz = particlePayloadsInstance[ParticleIndex].origin + (particlePayloadsInstance[ParticleIndex].velocity * (particleConfig.maxLife - particlePayloadsInstance[ParticleIndex].life));
	// Size
	particleInstance[ParticleIndex].position.w = particleConfig.scale;
	
}