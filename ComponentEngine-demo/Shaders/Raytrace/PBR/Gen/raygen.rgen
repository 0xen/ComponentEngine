#version 460
#extension GL_NV_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(binding=2, set = 0) uniform CameraProperties
{
    mat4 view;
    mat4 proj;
    mat4 viewInverse;
    mat4 projInverse;
} cam;

struct RayPayload {
    vec3 color;
    float distance;
    vec3 normal;
    float reflector;
};

layout(location = 0) rayPayloadNV RayPayload rayPayload;





struct Ray
{
    vec3 origin;
    vec3 direction;
    float tmin;
    float tmax;
};

// Get the default ray information based on the starting screen pixel
Ray CameraRay(vec2 screen_coordinate)
{
    Ray ray;

    ray.origin = (cam.viewInverse*vec4(0,0,0,1)).xyz;
    vec4 target = cam.projInverse * vec4(screen_coordinate.x, screen_coordinate.y, 1, 1);

    ray.direction = (cam.viewInverse *vec4(normalize(target.xyz), 0)).xyz;

    ray.tmin = 0.001;
    ray.tmax = 10000.0;
    return ray;
}

// Trace a ray to see what we hit
void TraceRay(Ray ray)
{
    uint rayFlags = gl_RayFlagsOpaqueNV;
    uint cullMask = 0xff;


    uint sbtRecordOffset = 0;
    uint sbtRecordStride = 0;
    uint missIndex = 0;

    traceNV(topLevelAS, rayFlags, cullMask, sbtRecordOffset, sbtRecordStride,
        missIndex, ray.origin, ray.tmin, ray.direction, ray.tmax, 0 /*payload*/);
}


Ray CalculateReflection(Ray ray)
{
    const vec3 hitPos = ray.origin + ray.direction * rayPayload.distance;
    ray.origin.xyz = hitPos + rayPayload.normal * 0.001f;
    ray.direction.xyz = reflect(ray.direction.xyz, rayPayload.normal);
    return ray;
}


void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
    vec2 screen_coordinate = inUV * 2.0 - 1.0;

    

    vec3 color = vec3(0.0);
    // Create a basic ray payload
    Ray ray = CameraRay(screen_coordinate);




    rayPayload.reflector = 1.0f;

    for(int i = 0 ; i < 10; i ++)
    {
        TraceRay(ray);

        float max = ((rayPayload.reflector - 1.0f) * -1.0f);
        vec3 hitColor = rayPayload.color * max;
        //vec3 hitColor = rayPayload.color;


        if (rayPayload.distance < 0.0f)// Missed
        { 
            color += hitColor;//rayPayload.color;
            break;
        }
        else if (rayPayload.reflector > 0.01f) // Reflected
        {
            ray = CalculateReflection(ray);
            color += hitColor;// * (rayPayload.reflector * 0.01f);
        }
        else // Hit normaly, but not reflective enough
        {
            color += hitColor;
            break;
        }

    }







    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(color, 1.0));
}
