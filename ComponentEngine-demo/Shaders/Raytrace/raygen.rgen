#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "Structures.glsl"
#include "Maths.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding =2, set = 0, rgba8) uniform image2D accumilationImage;
layout(binding=3, set = 0) readonly uniform CameraBuffer {Camera camera; };


layout(location = 0) rayPayloadNV RayPayload ray;


layout (constant_id = 0) const int MISS_SHADER_INDEX = 0;

void main() 
{
	// Provide the system a random seed to base all the random functions from
	uint pixelRandomSeed = 12;

	// Calculate a random location within the pixel area so that each pixel instance is not in the same place and they blue together slightly
	const vec2 pixel = vec2(gl_LaunchIDNV.x + RandomFloat(pixelRandomSeed), gl_LaunchIDNV.y + RandomFloat(pixelRandomSeed));
	// Get the UV coordinate for the screenspace
    const vec2 uv = (pixel / gl_LaunchSizeNV.xy) * 2.0 - 1.0;


    vec3 color = vec3(0.0f,0.0f,0.0f);

    // Generate a random seem for the ray
    ray.randomSeed = InitRandomSeed(InitRandomSeed(gl_LaunchIDNV.x, gl_LaunchIDNV.y), camera.sampleCount);


	const float tmin = 0.001;
	const float tmax = 10000.0;

	// Loop through for the amount of samples we want to preform on the pixel.
	// This is done for depth of field (Bokah) effect.
	for (uint s = 0; s < camera.sampleCount; ++s)
	{


		vec2 offset = camera.aperture/2 * RandomInUnitDisk(ray.randomSeed);
		vec4 origin = camera.viewInverse * vec4(offset, 0, 1);
		vec4 target = camera.projInverse * (vec4(uv.x, uv.y, 1, 1));
		vec4 direction = camera.viewInverse * vec4(normalize(target.xyz * camera.focusDistance - vec3(offset, 0)), 0);
		

		ray.recursion = camera.recursionCount - 1;

	    traceNV(topLevelAS, gl_RayFlagsOpaqueNV | gl_RayFlagsCullBackFacingTrianglesNV , 0xFF, 0, 0,
	        MISS_SHADER_INDEX, origin.xyz, tmin, direction.xyz, tmax, 0 /*payload*/);

	    const vec3 hitColor = ray.colour.rgb;

		color += hitColor;
	}


	color/= camera.sampleCount;



    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(color,1.0f));

    
    imageStore(accumilationImage, ivec2(gl_LaunchIDNV.xy), vec4(color,1.0f));
}
