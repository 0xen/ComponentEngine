#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "Structures.glsl"
#include "Maths.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;

layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(binding =2, set = 0, rgba32f) uniform image2D accumilationImage;

layout(binding = 3, set = 0, r8ui) uniform uimage2D sampleImage;

layout(binding = 4, set = 0, r32f) uniform image2D rayDepthImage;

layout(binding=5, set = 0) readonly uniform CameraBuffer {Camera camera; };


layout(location = 0) rayPayloadNV RayPayload ray;


layout (constant_id = 0) const int MISS_SHADER_INDEX = 0;





void main() 
{
	const vec2 pixel = vec2(gl_LaunchIDNV.x, gl_LaunchIDNV.y);
	// Get the UV coordinate for the screenspace
    const vec2 uv = (pixel / gl_LaunchSizeNV.xy) * 2.0 - 1.0;

    // Used to store the color we are presenting
    vec3 color = vec3(0.0f,0.0f,0.0f);

    // Min-max range of the ray that we spawn
	const float tmin = 0.001;
	const float tmax = 10000.0;



	// Generate Initial Probing ray
	vec4 origin = camera.viewInverse * vec4(0,0, 0, 1);
	vec4 target = camera.projInverse * (vec4(uv.x, uv.y, 1, 1));
  	vec4 direction = camera.viewInverse * vec4(normalize(target.xyz), 0);


	ray.depth = 0.0f;
    // Dissable the depth test as this is a single ray pass
	ray.depthTest = false;

    // Total recursions allowed, this is for every hit, including transparancy
   	uint maxRecursion = 50;
   	uint maxOpaque = 3;

   	while(true)
   	{

	   	traceNV(topLevelAS, gl_RayFlagsOpaqueNV | gl_RayFlagsCullBackFacingTrianglesNV,
			0xFF, 0, 0, MISS_SHADER_INDEX, origin.xyz, tmin, direction.xyz, tmax, 0);


		if(ray.responce==0) // Got Color, Exit
		{
    		color = ray.colour.rgb;
			break;
		}
		else if(ray.responce==2)
		{
			direction = vec4(ray.direction,0.0f);
			origin = vec4(ray.origin,0.0f);
			maxRecursion--;
		}

		if(maxRecursion<=0)break;
   	}


	






	// Store the newly generated depth
    imageStore(rayDepthImage, ivec2(gl_LaunchIDNV.xy), vec4(ray.depth));


    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(color,1.0f));
}
