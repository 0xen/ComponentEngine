#version 460
#extension GL_NV_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(binding=2, set = 0) uniform CameraProperties
{
    mat4 view;
    mat4 proj;
    mat4 viewInverse;
    mat4 projInverse;
} cam;

layout(location = 0) rayPayloadNV float[4] rayPayload;

layout (constant_id = 0) const int MAX_RECURSION = 0;
layout (constant_id = 1) const int MISS_SHADER_INDEX = 0;





struct Ray
{
    vec3 origin;
    vec3 direction;
    float tmin;
    float tmax;
};

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec3 random_in_unit_disk(vec2 co) {
    vec3 p;
    do {
        p = 2.0*vec3(rand(co),rand(co)*2,0) - vec3(1,1,0);
        co+=p.xy;
    } while (dot(p,p) >= 1.0);
    return p;
}


// Get the default ray information based on the starting screen pixel
Ray CameraRay(vec2 screen_coordinate)
{
    Ray ray;

    vec3 cameraPos = (cam.viewInverse*vec4(0,0,0,1)).xyz;
    vec4 destination = cam.projInverse * vec4(screen_coordinate.x, screen_coordinate.y, 1, 1);

    //vec3 cameraPos = (cam.viewInverse*vec4(0,0,0,1)).xyz;
    //vec4 destination = cam.projInverse * vec4(screen_coordinate.x, screen_coordinate.y, 1, 1);



    //ray.direction = (cam.viewInverse *vec4(normalize(destination.xyz), 0)).xyz;


    
    vec3 lookAt = vec3(0,0,0);
    float focus_dist = length(cameraPos - lookAt);
    float aperture = 0.5f;
    float vfov = 45.0f;
    float M_PI = 3.14159265359f;
    float aspect = 1920.0f/1080.0f;



    float lens_rad = aperture / 2;
	float theta = vfov*M_PI/180;
	float half_height = tan(theta/2);
	float half_width = aspect * half_height;

    vec3 origin = (cam.viewInverse*vec4(0,0,0,1)).xyz;
    vec3 w = normalize(cameraPos - lookAt);
    vec3 u = normalize(cross(vec3(0,1,0), w));
    vec3 v = cross(w, u);

    vec3 lower_left_corner = origin  - half_width*focus_dist*u -half_height*focus_dist*v - focus_dist*w;
    vec3 horizontal = 2*half_width*focus_dist*u;
    vec3 vertical = 2*half_height*focus_dist*v;



    // Generation of ray
	vec3 rd = random_in_unit_disk(screen_coordinate) * lens_rad;
    vec3 offset = u * rd.x + v * rd.y;

    ray.origin = origin + offset;
    ray.direction = lower_left_corner + screen_coordinate.x*horizontal + screen_coordinate.y*vertical - origin - offset;






    ray.tmin = 0.001;
    ray.tmax = 10000.0;
    return ray;
}

// Trace a ray to see what we hit
void TraceRay(Ray ray)
{
    uint rayFlags = gl_RayFlagsOpaqueNV;
    uint cullMask = 0xff;


    uint sbtRecordOffset = 0;
    uint sbtRecordStride = 0;

    traceNV(topLevelAS, rayFlags, cullMask, sbtRecordOffset, sbtRecordStride,
        MISS_SHADER_INDEX, ray.origin, ray.tmin, ray.direction, ray.tmax, 0 /*payload*/);
}



void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
    vec2 screen_coordinate = inUV * 2.0 - 1.0;

    rayPayload[3] = intBitsToFloat(1);

    vec3 color = vec3(0.0);
    // Create a basic ray payload
    Ray ray = CameraRay(screen_coordinate);




    //rayPayload.reflector = 1.0f;


    TraceRay(ray);

    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(rayPayload[0],rayPayload[1],rayPayload[2], 1.0));
}
