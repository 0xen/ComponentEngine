#version 460
#extension GL_NV_ray_tracing : require

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(binding=2, set = 0) uniform CameraProperties
{
    mat4 view;
    mat4 proj;
    mat4 viewInverse;
    mat4 projInverse;
} cam;

struct RayPayload {
    vec3 color;
    float distance;
    vec3 normal;
    float reflector;
};

layout(location = 0) rayPayloadNV RayPayload rayPayload;
/*
// Max. number of recursion is passed via a specialization constant
layout (constant_id = 0) const int MAX_RECURSION = 0;
*/
void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = cam.viewInverse*vec4(0,0,0,1);
    vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
    vec4 direction = cam.viewInverse*vec4(normalize(target.xyz), 0) ;

    uint rayFlags = gl_RayFlagsOpaqueNV;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;

    uint sbtRecordOffset = 0; // Shader Group offset + 1 from this location (Eg. if we are at shader 1, it will go to shader 2 if this is 0)
    uint sbtRecordStride = 0;
    uint missIndex = 0;

    vec3 color = vec3(0.0);

    for (int i = 0; i < 10; i++) {
        traceNV(topLevelAS, rayFlags, cullMask, sbtRecordOffset, sbtRecordStride,
            missIndex, origin.xyz, tmin, direction.xyz, tmax, 0 /*payload*/);
        vec3 hitColor = rayPayload.color;


        if (rayPayload.distance < 0.0f) {
            color += hitColor;
            break;
        } else if (rayPayload.reflector > 0.01f) {
            const vec4 hitPos = origin + direction * rayPayload.distance;
            origin.xyz = hitPos.xyz + rayPayload.normal * 0.001f;
            direction.xyz = reflect(direction.xyz, rayPayload.normal);
            color += hitColor * (rayPayload.reflector * 0.01f);
        } else {
            color += hitColor;
            break;
        }


    }



    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(color, 1.0));
}
